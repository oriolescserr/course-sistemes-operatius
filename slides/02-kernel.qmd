---
title: "Kernel de Linux"
subtitle: "Unitat 2 ¬∑ Sistemes Operatius (SO)"
author: "Jordi Mateo Forn√©s"
logo: "/figures/corporative/institute.png"
format: 
  revealjs:
    transition: fade
    slide-number: true
    incremental: true 
    chalkboard: false
    css: styles.css
    footer: "Unitat 2 ¬∑ Sistemes Operatius (SO) [üè†](/index.html)</a>"
editor: visual

execute:
  freeze: auto
  echo: false
---

## Qu√® √©s el nucli d'un sistema operatiu? {.smaller}

El nucli del **SO** √©s la capa m√©s cr√≠tica i cont√© les rutines de gesti√≥ del sistema relacionades amb els recursos f√≠sic. Es troba sempre carregat a la Mem√≤ria.

#### Funcionalitats del nucli

-   El nucli t√© la capacitat d'assignar i desassignar la CPU als usuaris i processos per evitar que acaparin el recurs de forma ininterrompuda.
-   El nucli evita que els usuaris i processos accedeixin a dades d'altres usuaris.
-   El nucli evita els usuaris modif√≠quin el codi i les dades del nucli.
-   El nucli evita que els usuaris realitzin E/S il¬∑legals.

## Qu√© √©s la dualitat? {.smaller}

::::: columns
::: {.column width="60%"}
#### Mode kernel

-   El codi que s'executa en aquest mode t√© acc√©s a qualsevol adre√ßa de Mem√≤ria i a tots els recursos hardware.
-   Si un programa falla en aquest mode, tot el sistema quedar√† aturat.

#### Mode usuari

-   El codi no t√© acc√©s directe a Mem√≤ria ni als recursos hardware.
-   Si un programa falla en aquest mode, √∫nicament atura el programa i no el sistema.
:::

::: {.column width="40%"}
![](../figures/slides/01-introduction/esquema2.png)
:::
:::::

## Repte: Separaci√≥ de responsabilitats {.smaller}

::: center-container
Quina √©s la millor manera d'organitzar/separar totes les parts del sistema operatiu?
:::

-   Com **organitzem** les parts?
-   **Definici√≥ de pol√≠tiques**: Quines seran les accions a realitzar.
-   Com **cooperen** les parts?
-   **Mecanismes**: Com es duran a terme aquestes accions.

::: fragment
#### Classificaci√≥ (Estructura Interna)

1.  Monol√≠tics
2.  Capes
3.  Micro-kernel
4.  H√≠brids
5.  Hypervisors
:::

## Estructura simple {.smaller}

:::::: columns
::: {.column width="45%"}
### Caracter√≠stiques

-   Estructura no ben definida.
-   El **SO** √©s un conjunt de procediments que es poden cridar sense cap limitaci√≥.
-   Son sistemes complexos; dif√≠cil d'implementar i de depurar.
-   No tenen mode **dual**.
-   Exemple: MS-DOS
:::

:::: {.column width="45%"}
::: center
![](../figures/slides/02-kernel/kernel-msdos.png)
:::
::::
::::::

::: notes
Els sistemes operatius com MS-DOS o Unix (original) no tenien estructures ben definides.

No hi havia cap mode d‚Äôexecuci√≥ de la CPU (usuari i nucli), de manera que els errors en les aplicacions podrien provocar un bloqueig de tot el sistema.

Quan es va escriure DOS originalment, els seus desenvolupadors no tenien ni idea de quant de gran i important esdevindria. Va ser escrit per uns quants programadors en un temps relativament curt, sense el benefici de les t√®cniques modernes d‚Äôenginyeria de programari, i despr√©s va anar creixent amb el pas del temps fins a superar les seves expectatives originals. No divideix el sistema en subsistemes i no distingeix entre modes d‚Äôusuari i nucli, cosa que permet a tots els programes accedir directament al maquinari subjacent.
:::

## Estructura Monol√≠tica {.smaller}

:::::: columns
:::: {.column width="45%"}
Els serveis d'usuari i serveis del kernel s'implementen sota el mateix espai d'adreces.

::: center
![](../figures/slides/02-kernel/kernel-monolitic.png)
:::
::::

::: {.column width="45%"}
-   üëç Les funcionalitats (serveis) s'invoquen amb crides al sistema.
-   üëç Els controladors de dispositius es carreguen al nucli i passen a formar part del nucli.
-   üëé Dif√≠cil d'entendre, modificar i mantenir.
-   üëé Poc fiable (sense a√Øllament entre els m√≤duls del sistema)
:::
::::::

## Estructura per capes {.smaller}

::::: columns
::: {.column width="50%"}
![](../figures/slides/02-kernel/layered-kernel.png)
:::

::: {.column width="40%"}
-   üëç Independ√®ncia entre les capes.
-   üëç Permet descriure el **SO** de forma clara.
-   üëç Simplicitat en la construcci√≥ i depuraci√≥.
-   üëé Rendiment.
-   üëé √âs dif√≠cil definir les capes a causa de les limitacions per comunicar-se.
:::
:::::

::: notes
Un exemple √©s UNIX, aquest sistema operatiu, creat per Dennis Ritchie i Ken Thompson als anys 70, va adoptar una arquitectura en capes m√©s simple que Multics. Aquestes capes s√≥n: Hardware, Kernel, Shell i Aplicacions. Un exemple √©s: NetBSD.

Permet que cada anell tingui un conjunt de funcions i responsabilitats clarament definides, i que cada anell pugui comunicar-se amb els anells adja√ßents.
:::

## Estructura Microkernel {.smaller}

:::::: columns
::: {.column width="45%"}
-   Els serveis d'usuari i serveis del kernel s'implementi en diferents espais d'adreces.

-   Comunicaci√≥ entre els m√≤duls utilitza el pas de missatges.

-   üëç El kernel t√© una mida m√©s redu√Øda.

-   üëç Portable, segur, fiable i extensible.

-   üëé Reducci√≥ de la velocitat d'execuci√≥ i del rendiment.
:::

:::: {.column width="45%"}
::: center
![](../figures/slides/02-kernel/microkernel.png)
:::
::::
::::::

::: notes
El sistema operatiu MacOS, desenvolupat per Apple, va aprofitar l‚Äôestabilitat i seguretat del nucli Mach com a base per al seu sistema operatiu. En aquest sistema, serveis com la gesti√≥ de mem√≤ria, la gesti√≥ de fitxers i la xarxa es van traslladar fora del nucli, a servidors externs, millorant la estabilitat, fiabilitat i modularitat del sistema.

Sistemes en temps real com QNX, o dispotius encastats poden utilitzar aquesta arquitectura.
:::

## Microkernel vs Monol√≠tic

::: center-container
![](../figures/slides/02-kernel/theory/Microkernel-Vs-Monolithic-Kernel.png){width="80%"}
:::

::: notes
El **microkernel** √©s m√©s *lent* per√≤ m√©s *segur i fiable* que el nucli **monol√≠tic**. El nucli **monol√≠tic** √©s *r√†pid* per√≤ menys *segur*, ja que qualsevol fallada del servei pot causar un bloqueig del sistema.
:::

## Microkernel vs Monol√≠tic vs H√≠brids

::: center-container
![](../figures/slides/02-kernel/theory/hibrids.png)
:::

## Opini√≥ sobre els h√≠brids {.smaller}

Molts experts en sistemes operatius consideren que el terme **h√≠brid** √©s un terme de m√†rqueting m√©s que una categoria t√®cnica clara. Aquest terme s'utilitza sovint per descriure sistemes operatius que combinen elements de nuclis monol√≠tics i microkernel, per√≤ la seva definici√≥ exacta pot variar segons l'√∫s i la interpretaci√≥.

> "As to the whole 'hybrid kernel' thing - it's just marketing. It's 'oh, those microkernels had good PR, how can we try to get good PR for our working kernel? Oh, I know, let's use a cool name and try to imply that it has all the PR advantages that that other system has' - Linus Torvalds

## Kernel Modular

::: definition-box
El serveis (*core*) estan integrats al kernel, la resta es poden carregar i descarregar de forma din√†mica.
:::

-   No cal reiniciar per afegir nous m√≤duls.
-   No cal implementar mecanismes de pas de missatges com en els microkernels.
-   Qualsevol m√≤dul pot comunicar-se amb qualsevol altre.

::: center-container
![](../figures/slides/02-kernel/modular-kernel.png){width="60%"}
:::

::: notes
Els sistemes operatius modulars com la majoria de sistemes operatius monol√≠tics moderns com Linux, BSD, poden carregar (i descarregar) din√†micament m√≤duls executables en temps d‚Äôexecuci√≥.

Aquesta modularitat del sistema operatiu √©s a nivell binari (imatge) i no a nivell d‚Äôarquitectura.

Pr√†cticament, carregar m√≤duls din√†micament √©s simplement una manera m√©s flexible de manejar la imatge del sistema operatiu en temps d'execuci√≥, en lloc de reiniciar-lo amb una imatge diferent del sistema operatiu.

Els m√≤duls permeten ampliar f√†cilment les capacitats dels sistemes operatius segons sigui necessari.

Els m√≤duls que es poden carregar din√†micament comporten una petita sobrec√†rrega en comparaci√≥ amb la incorporaci√≥ del m√≤dul a la imatge del sistema operatiu.

Tanmateix, en alguns casos, carregar m√≤duls din√†micament (segons calgui) ajuda a mantenir la quantitat de codi que s‚Äôexecuta a l‚Äôespai del nucli al m√≠nim; per exemple, per minimitzar la petjada del sistema operatiu per a dispositius incrustats o aquells amb recursos de maquinari limitats. √âs a dir, no cal que un m√≤dul descarregat s‚Äôemmagatzemi en mem√≤ria d‚Äôacc√©s aleatori esc√†s.
:::

## Monol√≠tic i Modular

-   Els kernels monol√≠tics poden ser modulars.
-   Els m√≤duls es carreguen i descarreguen din√†micament en temps d'execuci√≥.
-   Els components es poden activar o desactivar en temps de compilaci√≥.
-   El kernel s'organitza en subsistemes l√≤gics independents.
-   Interf√≠cies estrictes per√≤ amb baix cost en rendiment: macros, funcions en l√≠nia, punters a funcions.

## Exemple: Linux {.smaller}

::::::: columns
:::: {.column width="50%"}
::: definition-box
El nucli Linux √©s un dels projectes de codi obert m√©s grans del m√≥n, amb milers de desenvolupadors que aporten codi i milions de l√≠nies de codi canviats per a cada versi√≥.
:::

-   Arquitectura **Monol√≠tica** h√≠brida basada en m√≤duls.
    -   Enlla√ßat din√†mic.
    -   M√≤duls apilables.
-   Disseny orientat a objectes.
-   Suport per a m√∫ltiples fils d'execuci√≥.
-   Suport per processament m√∫ltiple sim√®tric.
-   Abstracci√≥ hardware.
::::

:::: {.column width="40%"}
::: center
![](../figures/slides/02-kernel/theory/cas-linux.png)
:::
::::
:::::::

::: notes
Es distribueix sota la llic√®ncia GPLv2, que simplement esmenta, requereix que qualsevol modificaci√≥ del nucli feta amb el programari que s‚Äôenvia al client s‚Äôhagi de posar a la seva disposici√≥ (els clients), tot i que a la pr√†ctica la majoria de les empreses posen el codi font a disposici√≥ del p√∫blic.

Per tal d‚Äôescalar el proc√©s de desenvolupament, Linux utilitza un model de manteniment jer√†rquic:

Linus Torvalds √©s el mantenidor del nucli Linux i fa merge dels **pull requests** de la comunitat.

La comunitat t√© un o m√©s mantenidors que accepten *patches* de desenvolupadors, mantenint el seu propi arbre git.

-   Linux Torvalds: [git](git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux-2.6.git)
-   David Miller (treball en xarxa): [git](git.kernel.org/pub/scm/linux/kernel/git/davem/net.git/)
:::

## Hypervisors {.smaller}

-   Capa fina sobre el maquinari
-   Sistemes host dins m√†quines virtuals
-   Normalment requereixen caracter√≠stiques de maquinari (p.e. Intel VT-x)

::: center-container
![](../figures/slides/02-kernel/theory/mvs.png){width="60%"}
:::

## Hypervisors {.smaller}

::::: columns
::: {.column width="50%"}
-   KVM √©s un m√≤dul del kernel Linux que permet la virtualitzaci√≥ a trav√©s d'un sistema host.
-   XEN √©s un hypervisor de codi obert que permet la virtualitzaci√≥ directa del maquinari.
:::

::: {.column width="50%"}
![](../figures/slides/02-kernel/xen-kvm.png){width="80%"}
:::
:::::

## Exokernels {.smaller}

::: center-container
Cada m√†quina virtual disposa d‚Äôun exokernel que exporta directament els recursos f√≠sics.
:::

-   No implementa abstraccions altes (fitxers, sockets, processos), sin√≥ que ofereix primitives de baix nivell (p. ex. blocs de disc, p√†gines de mem√≤ria, l√≠nies de CPU).
-   Nom√©s valida i arbitra l‚Äô√∫s dels recursos, delegant la seva gesti√≥ a biblioteques d‚Äôusuari.
-   Mou la multiprogramaci√≥ a l‚Äôespai d‚Äôusuari, com la planificaci√≥, la gesti√≥ de mem√≤ria i la comunicaci√≥ entre processos (IPC).
-   ü§è Els exokernels s√≥n tan petits que poden ser incorporats dins aplicacions espec√≠fiques (p. ex. control de tr√†nsit urb√†).
-   ‚ú® minimitza l‚Äôoverhead i dona flexibilitat en la gesti√≥ de recursos.

::: {.center-container .fragment}
üëâ No es traslladen instruccions de mode kernel a mode usuari, sin√≥ la l√≤gica de gesti√≥ de recursos.
:::

::: notes
Imaginem que particionem una m√†quina en diferents m√†quines virtuals amb un subconjunt de recursos. Cada m√†quina virtual t√© un exokernel que li permet accedir directament als recursos de la m√†quina f√≠sica. La idea √©s reduir el overhead del sistema separant la multiprogramaci√≥ de les funcions del sistema operatiu en l‚Äôespai usuari.

En aquest cas no estem movent instruccions de mode kernel a mode usuari, sin√≥ que estem movent la gesti√≥ de recursos del sistema operatiu a l‚Äôespai d‚Äôusuari. De fet, els exokernels s√≥n tan petits que poden ser incrustats en aplicacions espec√≠fiques. Per exemple, un exokernel podria ser incrustat en una aplicaci√≥ de control de tr√†nsit per coordinar els sem√†fors d‚Äôuna ciutat.
:::

## Unikernels {.smaller}

::: {.center-container .fragment}
Els unikernels empaqueten aplicaci√≥ + m√≠nim sistema operatiu en una √∫nica imatge executable sobre un hipervisor o hardware.
:::

-   Nom√©s s‚Äôinclouen les llibreries i serveis estrictament necessaris per l‚Äôaplicaci√≥.
-   Execuci√≥ directa: corren sobre un hipervisor o hardware, sense cap OS d‚Äôhost per sota.
-   Efici√®ncia: imatges extremadament petites, r√†pides d‚Äôarrencar.
-   Inspiraci√≥:
    -   Dels contenidors, per√≤ sense dependre d‚Äôun kernel complet subjacent.
    -   Dels exokernels, per√≤ aqu√≠ les primitives exposades no s√≥n per al maquinari, sin√≥ per a les necessitats espec√≠fiques de l‚Äôaplicaci√≥.
-   S'utilitzen en IoT, serveis cloud lleugers, entorns on importen temps d‚Äôarrencada i seguretat.

::: {.center-container .fragment}
El codi de l‚Äôaplicaci√≥ i el kernel formen una sola unitat optimitzada.
:::

::: notes
Els unikernels s√≥n una forma de sistema operatiu que empaqueta tot el codi necessari per a una aplicaci√≥ en un sol paquet. Aquest paquet s‚Äôexecuta directament sobre una m√†quina virtual o un hipervisor, sense cap sistema operatiu subministrat. Aix√≤ permet als unikernels ser molt petits i molt eficients, ja que no hi ha cap codi innecessari.

S'inspiren en els contenidors, per√≤ en lloc d‚Äôexecutar-se en un sistema operatiu complet, s‚Äôexecuten directament sobre el hardware. Aix√≤ els fa molt m√©s petits i molt m√©s eficients que els contenidors, ja que no hi ha cap sistema operatiu subministrat.

S'inspiren en els exokernels, per√≤ en lloc de proporcionar un conjunt de primitives de baix nivell per accedir directament als recursos de la m√†quina, proporcionen un conjunt de primitives de baix nivell per accedir directament als recursos de l‚Äôaplicaci√≥.
:::

## Aix√≤ √©s tot per avui {.smaller}

::::: columns
::: {.column width="60%"}
#### TAKE HOME MESSAGE

-   Els monol√≠tics ofereixen velocitat per√≤ fragilitat.
-   Els microkernels aposten per modularitat i seguretat a costa de lat√®ncia.
-   Els modulars permeten cr√©ixer sense reescriure tot el nucli.
-   Els exokernels lliuren el control directe a l‚Äôaplicaci√≥ per m√†xima efici√®ncia.
-   Els hipervisors faciliten la conviv√®ncia d‚Äôecosistemes sencers sobre un mateix hardware.
-   Els unikernels empaqueten aplicaci√≥ i SO per a desplegaments ultralleugers i segurs.
:::

::: {.column width="40%"}
![](https://static.posters.cz/image/750/posters/looney-tunes-thats-all-folks-i295.jpg)
:::
:::::